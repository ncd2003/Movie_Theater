import { useEffect, useState } from "react";
import { getObj } from "./indexedDBService";
import React from "react";

interface IProps {
    hideChildren?: boolean;
    children: React.ReactNode;
    permission: { method: string, apiPath: string, module: string };
}

const Access = (props: IProps) => {
    const { permission, hideChildren = false, children } = props;
    const [allow, setAllow] = useState<boolean>(false);
    const [permissions, setPermissions] = useState([{ method: '', apiPath: '', module: '' }]);

    // üîπ L·∫•y d·ªØ li·ªáu t·ª´ IndexedDB
    useEffect(() => {
        async function getPermissions() {
            try {
                const res = await getObj(); // L·∫•y d·ªØ li·ªáu t·ª´ IndexedDB
                setPermissions(res[0].permissions);
                // console.log(permissions)
            } catch (error) {
                console.error("L·ªói khi l·∫•y permissions:", error);
            }
        }

        getPermissions();
    }, []); // Ch·∫°y 1 l·∫ßn khi component mount

    // üîπ Ki·ªÉm tra quy·ªÅn sau khi permissions thay ƒë·ªïi
    useEffect(() => {
        if (permissions?.length > 0) {
            // üîπ Ki·ªÉm tra xem quy·ªÅn c√≥ t·ªìn t·∫°i kh√¥ng
            const hasPermission = permissions.some(fmp =>
                fmp.method === permission.method &&
                fmp.apiPath === permission.apiPath &&
                fmp.module === permission.module
            );

            setAllow(hasPermission);
            // console.log(hasPermission)
            // // console.log("permissions " +permissions[0])
            // console.log(permission.method + " - " + permission.apiPath + " - " + permission.module)
        }
    }, [permissions, permission]); // Ch·∫°y l·∫°i khi permissions ho·∫∑c permission thay ƒë·ªïi

    return allow ? <>{children}</> : hideChildren ? null : <div>Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p</div>;
};

export default Access;