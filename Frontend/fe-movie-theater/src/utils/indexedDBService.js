import RoleApi from "../api/RoleApi";

const DB_NAME = "Movie_Theater";
const STORE_NAME = "Permissions";

// üîπ H√†m m·ªü IndexedDB
export function openDB() {
    return new Promise((resolve, reject) => {
        const request = indexedDB.open(DB_NAME, 1);

        request.onupgradeneeded = (event) => {
            let db = event.target.result;
            if (!db.objectStoreNames.contains(STORE_NAME)) {
                db.createObjectStore(STORE_NAME, { keyPath: "id", autoIncrement: true });
            }
        };

        request.onsuccess = () => resolve(request.result);
        request.onerror = () => reject(request.error);
    });
}

// üîπ H√†m l·∫•y danh s√°ch t·ª´ IndexedDB
export async function getObj() {
    const db = await openDB();
    return new Promise((resolve, reject) => {
        const transaction = db.transaction(STORE_NAME, "readonly");
        const store = transaction.objectStore(STORE_NAME);
        const request = store.getAll();

        request.onsuccess = () => {
            // console.log("üìÇ D·ªØ li·ªáu t·ª´ IndexedDB:", request.result);
            resolve(request.result);
        };
        request.onerror = () => reject("‚ùå Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu t·ª´ IndexedDB!");
    });
}

// üîπ H√†m l∆∞u danh s√°ch v√†o IndexedDB
export async function saveList(obj) {
    if (!obj) {
        // console.log("‚ö†Ô∏è Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ l∆∞u v√†o IndexedDB!");
        return;
    }

    const db = await openDB();
    return new Promise((resolve, reject) => {
        const transaction = db.transaction(STORE_NAME, "readwrite");
        const store = transaction.objectStore(STORE_NAME);

        store.add(obj)

        transaction.oncomplete = () => {
            // console.log("‚úÖ D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c l∆∞u v√†o IndexedDB!");
            resolve();
        };
        transaction.onerror = () => reject("‚ùå L·ªói khi l∆∞u v√†o IndexedDB!");
    });
}

// üîπ Ki·ªÉm tra & l∆∞u danh s√°ch n·∫øu ch∆∞a c√≥
export async function saveListIfEmpty() {
    const db = await openDB();
    const transaction = db.transaction(STORE_NAME, "readonly");
    const store = transaction.objectStore(STORE_NAME);
    const request = store.count(); // ƒê·∫øm s·ªë l∆∞·ª£ng record

    return new Promise((resolve, reject) => {
        request.onsuccess = async () => {
            if (request.result === 0) {
                // console.log("‚ö†Ô∏è IndexedDB tr·ªëng, ƒëang t·∫£i d·ªØ li·ªáu t·ª´ API...");
                const roleId = localStorage?.getItem("roleId");
                // console.log("Role id ", roleId);
                if (roleId) {
                    const sampleList = (await RoleApi.fetchPermissionRoleById(roleId))?.data;
                    //console.log("üì° D·ªØ li·ªáu t·ª´ API:", sampleList);

                    if (sampleList) {
                        await saveList(sampleList);
                        resolve("D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c th√™m v√†o IndexedDB!");
                    } else {
                        // console.log("‚ö†Ô∏è API kh√¥ng tr·∫£ v·ªÅ d·ªØ li·ªáu, kh√¥ng th·ªÉ l∆∞u v√†o IndexedDB!");
                        resolve("Kh√¥ng c√≥ d·ªØ li·ªáu m·ªõi.");
                    }
                }

            } else {
                // console.log("‚úÖ D·ªØ li·ªáu ƒë√£ t·ªìn t·∫°i trong IndexedDB, kh√¥ng c·∫ßn l∆∞u l·∫°i.");
                resolve("D·ªØ li·ªáu ƒë√£ t·ªìn t·∫°i.");
            }
        };
        request.onerror = () => reject("‚ùå Kh√¥ng th·ªÉ ki·ªÉm tra d·ªØ li·ªáu trong IndexedDB!");
    });
}

// üîπ X√≥a to√†n b·ªô d·ªØ li·ªáu trong IndexedDB
export async function clearPermissions() {
    const db = await openDB();
    return new Promise((resolve, reject) => {
        const transaction = db.transaction(STORE_NAME, "readwrite");
        const store = transaction.objectStore(STORE_NAME);

        const clearRequest = store.clear();

        clearRequest.onsuccess = () => {
            // console.log("üóëÔ∏è ƒê√£ x√≥a to√†n b·ªô d·ªØ li·ªáu trong IndexedDB!");
            resolve("‚úÖ D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c x√≥a!");
        };

        clearRequest.onerror = () => reject("‚ùå L·ªói khi x√≥a d·ªØ li·ªáu trong IndexedDB!");
    });
}

